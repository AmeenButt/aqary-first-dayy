// Code generated by MockGen. DO NOT EDIT.
// Source: assesment.sqlc.dev/app/postgres (interfaces: Store)

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	context "context"
	reflect "reflect"

	postgres "assesment.sqlc.dev/app/postgres"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 postgres.CreateUserParams) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTransaction mocks base method.
func (m *MockStore) CreateUserTransaction(arg0 context.Context, arg1 postgres.CreateUserTransactionParams) (postgres.UserTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTransaction", arg0, arg1)
	ret0, _ := ret[0].(postgres.UserTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTransaction indicates an expected call of CreateUserTransaction.
func (mr *MockStoreMockRecorder) CreateUserTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTransaction", reflect.TypeOf((*MockStore)(nil).CreateUserTransaction), arg0, arg1)
}

// CreateUserWallet mocks base method.
func (m *MockStore) CreateUserWallet(arg0 context.Context, arg1 postgres.CreateUserWalletParams) (postgres.UserWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWallet", arg0, arg1)
	ret0, _ := ret[0].(postgres.UserWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWallet indicates an expected call of CreateUserWallet.
func (mr *MockStoreMockRecorder) CreateUserWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWallet", reflect.TypeOf((*MockStore)(nil).CreateUserWallet), arg0, arg1)
}

// DeleteProperty mocks base method.
func (m *MockStore) DeleteProperty(arg0 context.Context, arg1 int64) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockStoreMockRecorder) DeleteProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockStore)(nil).DeleteProperty), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserTransaction mocks base method.
func (m *MockStore) DeleteUserTransaction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTransaction indicates an expected call of DeleteUserTransaction.
func (mr *MockStoreMockRecorder) DeleteUserTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTransaction", reflect.TypeOf((*MockStore)(nil).DeleteUserTransaction), arg0, arg1)
}

// DeleteUserWallet mocks base method.
func (m *MockStore) DeleteUserWallet(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserWallet indicates an expected call of DeleteUserWallet.
func (mr *MockStoreMockRecorder) DeleteUserWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWallet", reflect.TypeOf((*MockStore)(nil).DeleteUserWallet), arg0, arg1)
}

// GetPropertyByID mocks base method.
func (m *MockStore) GetPropertyByID(arg0 context.Context, arg1 int64) (postgres.GetPropertyByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyByID", arg0, arg1)
	ret0, _ := ret[0].(postgres.GetPropertyByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyByID indicates an expected call of GetPropertyByID.
func (mr *MockStoreMockRecorder) GetPropertyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyByID", reflect.TypeOf((*MockStore)(nil).GetPropertyByID), arg0, arg1)
}

// GetPropertyByUserID mocks base method.
func (m *MockStore) GetPropertyByUserID(arg0 context.Context, arg1 pgtype.Int4) ([]postgres.GetPropertyByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyByUserID", arg0, arg1)
	ret0, _ := ret[0].([]postgres.GetPropertyByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyByUserID indicates an expected call of GetPropertyByUserID.
func (mr *MockStoreMockRecorder) GetPropertyByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyByUserID", reflect.TypeOf((*MockStore)(nil).GetPropertyByUserID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 pgtype.Text) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int64) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserWallet mocks base method.
func (m *MockStore) GetUserWallet(arg0 context.Context, arg1 pgtype.Int4) (postgres.GetUserWalletRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWallet", arg0, arg1)
	ret0, _ := ret[0].(postgres.GetUserWalletRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWallet indicates an expected call of GetUserWallet.
func (mr *MockStoreMockRecorder) GetUserWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWallet", reflect.TypeOf((*MockStore)(nil).GetUserWallet), arg0, arg1)
}

// GetUserWalletByID mocks base method.
func (m *MockStore) GetUserWalletByID(arg0 context.Context, arg1 int64) (postgres.GetUserWalletByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWalletByID", arg0, arg1)
	ret0, _ := ret[0].(postgres.GetUserWalletByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWalletByID indicates an expected call of GetUserWalletByID.
func (mr *MockStoreMockRecorder) GetUserWalletByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWalletByID", reflect.TypeOf((*MockStore)(nil).GetUserWalletByID), arg0, arg1)
}

// GetUserWalletTransactions mocks base method.
func (m *MockStore) GetUserWalletTransactions(arg0 context.Context, arg1 pgtype.Int4) ([]postgres.GetUserWalletTransactionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWalletTransactions", arg0, arg1)
	ret0, _ := ret[0].([]postgres.GetUserWalletTransactionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWalletTransactions indicates an expected call of GetUserWalletTransactions.
func (mr *MockStoreMockRecorder) GetUserWalletTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWalletTransactions", reflect.TypeOf((*MockStore)(nil).GetUserWalletTransactions), arg0, arg1)
}

// InsertProperty mocks base method.
func (m *MockStore) InsertProperty(arg0 context.Context, arg1 postgres.InsertPropertyParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProperty", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProperty indicates an expected call of InsertProperty.
func (mr *MockStoreMockRecorder) InsertProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProperty", reflect.TypeOf((*MockStore)(nil).InsertProperty), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockStore) ListTransactions(arg0 context.Context) ([]postgres.ListTransactionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0)
	ret0, _ := ret[0].([]postgres.ListTransactionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockStoreMockRecorder) ListTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockStore)(nil).ListTransactions), arg0)
}

// ListUserWallets mocks base method.
func (m *MockStore) ListUserWallets(arg0 context.Context) ([]postgres.ListUserWalletsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserWallets", arg0)
	ret0, _ := ret[0].([]postgres.ListUserWalletsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserWallets indicates an expected call of ListUserWallets.
func (mr *MockStoreMockRecorder) ListUserWallets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserWallets", reflect.TypeOf((*MockStore)(nil).ListUserWallets), arg0)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context) ([]postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0)
}

// UpdateOTP mocks base method.
func (m *MockStore) UpdateOTP(arg0 context.Context, arg1 postgres.UpdateOTPParams) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOTP", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOTP indicates an expected call of UpdateOTP.
func (mr *MockStoreMockRecorder) UpdateOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOTP", reflect.TypeOf((*MockStore)(nil).UpdateOTP), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockStore) UpdateProperty(arg0 context.Context, arg1 postgres.UpdatePropertyParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockStoreMockRecorder) UpdateProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockStore)(nil).UpdateProperty), arg0, arg1)
}

// UpdatePropertyDemand mocks base method.
func (m *MockStore) UpdatePropertyDemand(arg0 context.Context, arg1 postgres.UpdatePropertyDemandParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyDemand", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyDemand indicates an expected call of UpdatePropertyDemand.
func (mr *MockStoreMockRecorder) UpdatePropertyDemand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyDemand", reflect.TypeOf((*MockStore)(nil).UpdatePropertyDemand), arg0, arg1)
}

// UpdatePropertyImages mocks base method.
func (m *MockStore) UpdatePropertyImages(arg0 context.Context, arg1 postgres.UpdatePropertyImagesParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyImages", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyImages indicates an expected call of UpdatePropertyImages.
func (mr *MockStoreMockRecorder) UpdatePropertyImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyImages", reflect.TypeOf((*MockStore)(nil).UpdatePropertyImages), arg0, arg1)
}

// UpdatePropertyLocation mocks base method.
func (m *MockStore) UpdatePropertyLocation(arg0 context.Context, arg1 postgres.UpdatePropertyLocationParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyLocation", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyLocation indicates an expected call of UpdatePropertyLocation.
func (mr *MockStoreMockRecorder) UpdatePropertyLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyLocation", reflect.TypeOf((*MockStore)(nil).UpdatePropertyLocation), arg0, arg1)
}

// UpdatePropertySize mocks base method.
func (m *MockStore) UpdatePropertySize(arg0 context.Context, arg1 postgres.UpdatePropertySizeParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertySize", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertySize indicates an expected call of UpdatePropertySize.
func (mr *MockStoreMockRecorder) UpdatePropertySize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertySize", reflect.TypeOf((*MockStore)(nil).UpdatePropertySize), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockStore) UpdateStatus(arg0 context.Context, arg1 postgres.UpdateStatusParams) (postgres.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(postgres.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockStoreMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockStore)(nil).UpdateStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 postgres.UpdateUserParams) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPicture mocks base method.
func (m *MockStore) UpdateUserPicture(arg0 context.Context, arg1 postgres.UpdateUserPictureParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPicture", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPicture indicates an expected call of UpdateUserPicture.
func (mr *MockStoreMockRecorder) UpdateUserPicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPicture", reflect.TypeOf((*MockStore)(nil).UpdateUserPicture), arg0, arg1)
}

// UpdateUserWalletAmount mocks base method.
func (m *MockStore) UpdateUserWalletAmount(arg0 context.Context, arg1 postgres.UpdateUserWalletAmountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWalletAmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWalletAmount indicates an expected call of UpdateUserWalletAmount.
func (mr *MockStoreMockRecorder) UpdateUserWalletAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWalletAmount", reflect.TypeOf((*MockStore)(nil).UpdateUserWalletAmount), arg0, arg1)
}

// WithTx mocks base method.
func (m *MockStore) WithTx(arg0 pgx.Tx) *postgres.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(*postgres.Queries)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockStoreMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockStore)(nil).WithTx), arg0)
}
