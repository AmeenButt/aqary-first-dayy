// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, password
) VALUES (
  $1, $2, $3
)
RETURNING id, name, email, password
`

type CreateUserParams struct {
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const createUserTransaction = `-- name: CreateUserTransaction :one
INSERT INTO user_transactions (
  user_wallet_id, transaction_amount, action
) VALUES (
  $1, $2, $3
)
RETURNING id, action, user_wallet_id, transaction_amount
`

type CreateUserTransactionParams struct {
	UserWalletID      pgtype.Int4
	TransactionAmount pgtype.Float8
	Action            string
}

func (q *Queries) CreateUserTransaction(ctx context.Context, arg CreateUserTransactionParams) (UserTransaction, error) {
	row := q.db.QueryRow(ctx, createUserTransaction, arg.UserWalletID, arg.TransactionAmount, arg.Action)
	var i UserTransaction
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.UserWalletID,
		&i.TransactionAmount,
	)
	return i, err
}

const createUserWallet = `-- name: CreateUserWallet :one
INSERT INTO user_wallet (
  user_id, amount
) VALUES (
  $1, $2
)
RETURNING id, user_id, amount
`

type CreateUserWalletParams struct {
	UserID pgtype.Int4
	Amount pgtype.Float8
}

func (q *Queries) CreateUserWallet(ctx context.Context, arg CreateUserWalletParams) (UserWallet, error) {
	row := q.db.QueryRow(ctx, createUserWallet, arg.UserID, arg.Amount)
	var i UserWallet
	err := row.Scan(&i.ID, &i.UserID, &i.Amount)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserTransaction = `-- name: DeleteUserTransaction :exec
DELETE FROM user_transactions
WHERE id = $1
`

func (q *Queries) DeleteUserTransaction(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserTransaction, id)
	return err
}

const deleteUserWallet = `-- name: DeleteUserWallet :exec
DELETE FROM user_wallet
WHERE id = $1
`

func (q *Queries) DeleteUserWallet(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserWallet, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserWallet = `-- name: GetUserWallet :one
SELECT u.id, user_id, amount, us.id, name, email, password
FROM user_wallet u
JOIN users us ON u.user_id = us.id
WHERE u.user_id = $1
LIMIT 1
`

type GetUserWalletRow struct {
	ID       int64
	UserID   pgtype.Int4
	Amount   pgtype.Float8
	ID_2     int64
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
}

// SELECT * FROM user_wallet AS u WHERE u.user_id = $1 LIMIT 1;
func (q *Queries) GetUserWallet(ctx context.Context, userID pgtype.Int4) (GetUserWalletRow, error) {
	row := q.db.QueryRow(ctx, getUserWallet, userID)
	var i GetUserWalletRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserWalletByID = `-- name: GetUserWalletByID :one
SELECT u.id, user_id, amount, us.id, name, email, password FROM user_wallet u JOIN users us ON u.user_id = us.id WHERE u.id = $1 LIMIT 1
`

type GetUserWalletByIDRow struct {
	ID       int64
	UserID   pgtype.Int4
	Amount   pgtype.Float8
	ID_2     int64
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) GetUserWalletByID(ctx context.Context, id int64) (GetUserWalletByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserWalletByID, id)
	var i GetUserWalletByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserWalletTransactions = `-- name: GetUserWalletTransactions :many
SELECT u.id, action, user_wallet_id, transaction_amount, us.id, user_id, amount FROM user_transactions u JOIN user_wallet us ON u.user_wallet_id = us.id WHERE u.user_wallet_id = $1
`

type GetUserWalletTransactionsRow struct {
	ID                int64
	Action            string
	UserWalletID      pgtype.Int4
	TransactionAmount pgtype.Float8
	ID_2              int64
	UserID            pgtype.Int4
	Amount            pgtype.Float8
}

func (q *Queries) GetUserWalletTransactions(ctx context.Context, userWalletID pgtype.Int4) ([]GetUserWalletTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getUserWalletTransactions, userWalletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserWalletTransactionsRow
	for rows.Next() {
		var i GetUserWalletTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.UserWalletID,
			&i.TransactionAmount,
			&i.ID_2,
			&i.UserID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT u.id, action, user_wallet_id, transaction_amount, us.id, user_id, amount FROM user_transactions u JOIN user_wallet us ON u.user_wallet_id = us.id ORDER BY u.id
`

type ListTransactionsRow struct {
	ID                int64
	Action            string
	UserWalletID      pgtype.Int4
	TransactionAmount pgtype.Float8
	ID_2              int64
	UserID            pgtype.Int4
	Amount            pgtype.Float8
}

func (q *Queries) ListTransactions(ctx context.Context) ([]ListTransactionsRow, error) {
	rows, err := q.db.Query(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTransactionsRow
	for rows.Next() {
		var i ListTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.UserWalletID,
			&i.TransactionAmount,
			&i.ID_2,
			&i.UserID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserWallets = `-- name: ListUserWallets :many
SELECT u.id, user_id, amount, us.id, name, email, password FROM user_wallet u JOIN users us ON u.user_id = us.id ORDER BY u.id
`

type ListUserWalletsRow struct {
	ID       int64
	UserID   pgtype.Int4
	Amount   pgtype.Float8
	ID_2     int64
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) ListUserWallets(ctx context.Context) ([]ListUserWalletsRow, error) {
	rows, err := q.db.Query(ctx, listUserWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserWalletsRow
	for rows.Next() {
		var i ListUserWalletsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.ID_2,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password FROM users ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set name = $2,
  email = $3,
  password = $4
WHERE id = $1 RETURNING id, name, email, password
`

type UpdateUserParams struct {
	ID       int64
	Name     string
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const updateUserWalletAmount = `-- name: UpdateUserWalletAmount :exec
UPDATE user_wallet
  set amount = $2
  WHERE id = $1 RETURNING id, user_id, amount
`

type UpdateUserWalletAmountParams struct {
	ID     int64
	Amount pgtype.Float8
}

func (q *Queries) UpdateUserWalletAmount(ctx context.Context, arg UpdateUserWalletAmountParams) error {
	_, err := q.db.Exec(ctx, updateUserWalletAmount, arg.ID, arg.Amount)
	return err
}
