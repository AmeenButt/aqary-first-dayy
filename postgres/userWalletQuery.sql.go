// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: userWalletQuery.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserWallet = `-- name: CreateUserWallet :one
INSERT INTO user_wallet (
  user_id, amount
) VALUES (
  $1, $2
)
RETURNING id, user_id, amount, created_at, updated_at
`

type CreateUserWalletParams struct {
	UserID pgtype.Int4
	Amount pgtype.Float8
}

func (q *Queries) CreateUserWallet(ctx context.Context, arg CreateUserWalletParams) (UserWallet, error) {
	row := q.db.QueryRow(ctx, createUserWallet, arg.UserID, arg.Amount)
	var i UserWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserWallet = `-- name: DeleteUserWallet :exec
DELETE FROM user_wallet
WHERE id = $1
`

func (q *Queries) DeleteUserWallet(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserWallet, id)
	return err
}

const getUserWallet = `-- name: GetUserWallet :one
SELECT u.id, user_id, amount, u.created_at, u.updated_at, us.id, name, email, password, profile_picture, us.created_at, us.updated_at
FROM user_wallet u
JOIN users us ON u.user_id = us.id
WHERE u.user_id = $1
LIMIT 1
`

type GetUserWalletRow struct {
	ID             int64
	UserID         pgtype.Int4
	Amount         pgtype.Float8
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	ID_2           int64
	Name           string
	Email          pgtype.Text
	Password       pgtype.Text
	ProfilePicture pgtype.Text
	CreatedAt_2    pgtype.Timestamp
	UpdatedAt_2    pgtype.Timestamp
}

func (q *Queries) GetUserWallet(ctx context.Context, userID pgtype.Int4) (GetUserWalletRow, error) {
	row := q.db.QueryRow(ctx, getUserWallet, userID)
	var i GetUserWalletRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.ProfilePicture,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getUserWalletByID = `-- name: GetUserWalletByID :one
SELECT u.id, user_id, amount, u.created_at, u.updated_at, us.id, name, email, password, profile_picture, us.created_at, us.updated_at FROM user_wallet u JOIN users us ON u.user_id = us.id WHERE u.id = $1 LIMIT 1
`

type GetUserWalletByIDRow struct {
	ID             int64
	UserID         pgtype.Int4
	Amount         pgtype.Float8
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	ID_2           int64
	Name           string
	Email          pgtype.Text
	Password       pgtype.Text
	ProfilePicture pgtype.Text
	CreatedAt_2    pgtype.Timestamp
	UpdatedAt_2    pgtype.Timestamp
}

func (q *Queries) GetUserWalletByID(ctx context.Context, id int64) (GetUserWalletByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserWalletByID, id)
	var i GetUserWalletByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.ProfilePicture,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const listUserWallets = `-- name: ListUserWallets :many
SELECT u.id, user_id, amount, u.created_at, u.updated_at, us.id, name, email, password, profile_picture, us.created_at, us.updated_at FROM user_wallet u JOIN users us ON u.user_id = us.id ORDER BY u.id
`

type ListUserWalletsRow struct {
	ID             int64
	UserID         pgtype.Int4
	Amount         pgtype.Float8
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	ID_2           int64
	Name           string
	Email          pgtype.Text
	Password       pgtype.Text
	ProfilePicture pgtype.Text
	CreatedAt_2    pgtype.Timestamp
	UpdatedAt_2    pgtype.Timestamp
}

func (q *Queries) ListUserWallets(ctx context.Context) ([]ListUserWalletsRow, error) {
	rows, err := q.db.Query(ctx, listUserWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserWalletsRow
	for rows.Next() {
		var i ListUserWalletsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.ProfilePicture,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserWalletAmount = `-- name: UpdateUserWalletAmount :exec
UPDATE user_wallet
  set amount = $2
  WHERE id = $1 RETURNING id, user_id, amount, created_at, updated_at
`

type UpdateUserWalletAmountParams struct {
	ID     int64
	Amount pgtype.Float8
}

func (q *Queries) UpdateUserWalletAmount(ctx context.Context, arg UpdateUserWalletAmountParams) error {
	_, err := q.db.Exec(ctx, updateUserWalletAmount, arg.ID, arg.Amount)
	return err
}
